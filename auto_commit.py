#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LM Studio
"""

import subprocess
import requests
import json
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import (
        LM_STUDIO_URL, LM_STUDIO_MODEL, MAX_TOKENS, 
        TEMPERATURE, TIMEOUT, MAX_DIFF_SIZE
    )
except ImportError:
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω
    LM_STUDIO_URL = "http://localhost:1234/v1/chat/completions"
    LM_STUDIO_MODEL = "local-model"
    MAX_TOKENS = 50
    TEMPERATURE = 0.3
    TIMEOUT = 30
    MAX_DIFF_SIZE = 2000

def run_git_command(command, show_output=False):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å git –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command.split(), 
            capture_output=True, 
            text=True, 
            check=True
        )
        if show_output and result.stdout:
            print(result.stdout)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}'"
        if e.stderr:
            error_msg += f"\n–û—à–∏–±–∫–∞: {e.stderr.strip()}"
        if e.stdout:
            error_msg += f"\n–í—ã–≤–æ–¥: {e.stdout.strip()}"
        print(error_msg)
        return None

def get_git_diff():
    """–ü–æ–ª—É—á–∏—Ç—å diff –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ staging
    run_git_command("git add .")
    
    # –ü–æ–ª—É—á–∞–µ–º diff staged –∏–∑–º–µ–Ω–µ–Ω–∏–π
    diff = run_git_command("git diff --cached")
    if not diff:
        diff = run_git_command("git diff")
    
    return diff

def get_git_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    return run_git_command("git status --porcelain")

def get_file_changes_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        current_files = run_git_command("ls -la")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ (–±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
        last_commit_files = run_git_command("git ls-tree -r --name-only HEAD")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        file_stats = run_git_command("git diff --stat HEAD")
        
        return {
            'current_files': current_files,
            'last_commit_files': last_commit_files,
            'file_stats': file_stats
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö: {e}")
        return None

def get_changed_files_summary():
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    status = get_git_status()
    if not status:
        return "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    files_info = []
    for line in status.split('\n'):
        if line.strip():
            status_code = line[:2]
            filename = line[3:]
            
            if status_code.strip() == 'A':
                files_info.append(f"–î–æ–±–∞–≤–ª–µ–Ω: {filename}")
            elif status_code.strip() == 'M':
                files_info.append(f"–ò–∑–º–µ–Ω–µ–Ω: {filename}")
            elif status_code.strip() == 'D':
                files_info.append(f"–£–¥–∞–ª–µ–Ω: {filename}")
            elif status_code.strip() == 'R':
                files_info.append(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {filename}")
            elif '?' in status_code:
                files_info.append(f"–ù–æ–≤—ã–π: {filename}")
    
    return '\n'.join(files_info)

def clean_commit_message(message):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if not message:
        return message
    
    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
    message = message.strip('"\'')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    message = message.strip()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    if '\n' in message:
        message = message.split('\n')[0].strip()
    
    # –£–±–∏—Ä–∞–µ–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    cleanup_patterns = [
        '–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:',
        '–ö–æ–º–º–∏—Ç:',
        '–û—Ç–≤–µ—Ç:',
        '–ì–∏—Ç –∫–æ–º–º–∏—Ç:',
        'git commit:',
        'commit:',
        'Git:',
        '–Ø —Å–æ–∑–¥–∞–ª',
        '–Ø —Å–æ–∑–¥–∞–º',
        '–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å',
        '–ü—Ä–µ–¥–ª–∞–≥–∞—é',
        '–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
        '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
    ]
    
    for pattern in cleanup_patterns:
        if message.lower().startswith(pattern.lower()):
            message = message[len(pattern):].strip()
            break
    
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ –Ω–∞—á–∞–ª–µ
    message = message.lstrip(':')
    message = message.strip()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(message) > 50:
        message = message[:47] + '...'
    
    # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ
    message = message.rstrip('.')
    
    return message

def generate_commit_message(diff_content, status_content, files_info=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —á–µ—Ä–µ–∑ LM Studio"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    files_summary = get_changed_files_summary()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
    file_context = ""
    if files_info and files_info.get('file_stats'):
        file_context = f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {files_info['file_stats']}"
    
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –∏ —Å–æ–∑–¥–∞–π –ö–û–†–û–¢–ö–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞.

–§–∞–π–ª—ã:
{files_summary}

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
{status_content}
{file_context}

Diff (–æ—Ç—Ä—ã–≤–æ–∫):
{diff_content[:MAX_DIFF_SIZE]}

–í–∞–∂–Ω–æ:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–º–∏—Ç–∞
- –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
- –ù–∞—á–∏–Ω–∞–π —Å –≥–ª–∞–≥–æ–ª–∞ (–î–æ–±–∞–≤–∏–ª/–ò—Å–ø—Ä–∞–≤–∏–ª/–û–±–Ω–æ–≤–∏–ª/–£–¥–∞–ª–∏–ª)
- –ù–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

–ü—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é email
"""

    try:
        response = requests.post(
            LM_STUDIO_URL,
            json={
                "model": LM_STUDIO_MODEL,
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è git –∫–æ–º–º–∏—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–º–º–∏—Ç–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": MAX_TOKENS,
                "temperature": TEMPERATURE
            },
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            result = response.json()
            message = result['choices'][0]['message']['content'].strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            message = clean_commit_message(message)
            
            return message
        else:
            print(f"–û—à–∏–±–∫–∞ LM Studio API: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç —Å LM Studio")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    status = get_git_status()
    if not status:
        print("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return
    
    print("üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    print(status)
    
    # –ü–æ–ª—É—á–∞–µ–º diff
    diff = get_git_diff()
    if not diff:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å diff")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    print("üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
    files_info = get_file_changes_info()
    
    print("\nü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    commit_message = generate_commit_message(diff, status, files_info)
    
    if not commit_message:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
        fallback_message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –≤—Ä—É—á–Ω—É—é: ")
        commit_message = fallback_message if fallback_message else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç"
    
    print(f"\nüìã –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '{commit_message}'")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("\n‚ùì –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç? (y/n): ").lower().strip()
    if confirm not in ['y', 'yes', '–¥', '–¥–∞', '']:
        print("‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    commit_result = run_git_command(f'git commit -m "{commit_message}"')
    if commit_result is not None:
        print("‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ push
        push_confirm = input("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? (y/n): ").lower().strip()
        if push_confirm in ['y', 'yes', '–¥', '–¥–∞', '']:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã push
            current_branch = run_git_command("git branch --show-current")
            
            if current_branch:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–µ—Ç–∫—É '{current_branch}'...")
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º git push origin current_branch
                push_result = run_git_command(f"git push origin {current_branch}", show_output=True)
                
                if push_result is not None:
                    print("üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                else:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ç–∫–∏, –ø—Ä–æ–±—É—é –ø—Ä–æ—Å—Ç–æ–π push...")
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π git push
                    push_result = run_git_command("git push", show_output=True)
                    
                    if push_result is not None:
                        print("üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("   - –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
                        print("   - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å SSH –∫–ª—é—á–∞–º–∏")
                        print("   - –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞—Ç—å 'git push --set-upstream origin main'")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞")

if __name__ == "__main__":
    main()
