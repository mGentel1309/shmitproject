#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Git push
"""

import subprocess
import sys

def run_command(command, capture=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    try:
        if capture:
            result = subprocess.run(
                command.split(), 
                capture_output=True, 
                text=True, 
                check=True
            )
            return result.stdout.strip(), True
        else:
            result = subprocess.run(command.split(), check=True)
            return "", True
    except subprocess.CalledProcessError as e:
        if capture and e.stderr:
            return e.stderr.strip(), False
        return str(e), False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å Git...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    output, success = run_command("git status")
    if not success:
        print("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return False
    
    print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    branch, success = run_command("git branch --show-current")
    if success and branch:
        print(f"üìå –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
    
    return True

def check_remote():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—è—é —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
    
    remotes, success = run_command("git remote -v")
    if not success or not remotes:
        print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        return False
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
    print(remotes)
    
    return True

def check_upstream():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å upstream –≤–µ—Ç–∫—É"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä—è—é upstream –≤–µ—Ç–∫—É...")
    
    branch, success = run_command("git branch --show-current")
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
        return False
    
    upstream, success = run_command(f"git rev-parse --abbrev-ref {branch}@{{upstream}}")
    if not success:
        print(f"‚ö†Ô∏è –í–µ—Ç–∫–∞ '{branch}' –Ω–µ –∏–º–µ–µ—Ç upstream")
        return False
    
    print(f"‚úÖ Upstream –≤–µ—Ç–∫–∞: {upstream}")
    return True

def test_push():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å push"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É—é push...")
    
    # –ü—Ä–æ–±—É–µ–º dry-run push
    output, success = run_command("git push --dry-run")
    if success:
        print("‚úÖ Push –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output}")
        return True
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å push:")
        print(output)
        return False

def fix_upstream():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å upstream"""
    print("\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å upstream...")
    
    branch, success = run_command("git branch --show-current")
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
        return False
    
    # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å upstream
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é upstream –¥–ª—è –≤–µ—Ç–∫–∏ '{branch}'...")
    output, success = run_command(f"git push --set-upstream origin {branch}")
    
    if success:
        print("‚úÖ Upstream —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ upstream: {output}")
        return False

def check_auth():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä—è—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    
    # –ü—Ä–æ–±—É–µ–º fetch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    output, success = run_command("git fetch --dry-run")
    if success:
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:")
        print(output)
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSH –∫–ª—é—á–∏: ssh-keygen -t ed25519 -C 'your_email@example.com'")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ GitHub: cat ~/.ssh/id_ed25519.pub")
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS —Å —Ç–æ–∫–µ–Ω–æ–º")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Git push\n")
    
    if not check_git_status():
        return
    
    has_remote = check_remote()
    has_upstream = check_upstream()
    auth_works = check_auth()
    
    if not has_remote:
        print("\nüîß –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:")
        print("git remote add origin https://github.com/username/repo.git")
        return
    
    if not auth_works:
        print("\nüîß –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
        return
    
    if not has_upstream:
        if input("\n‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å upstream –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏? (y/n): ").lower().strip() in ['y', 'yes', '–¥', '–¥–∞']:
            fix_upstream()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    print("\nüß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç push...")
    if test_push():
        print("\nüéâ Git push –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å push")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. git push --set-upstream origin main")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

if __name__ == "__main__":
    main()
